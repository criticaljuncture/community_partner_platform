class @CPP.CommunityProgramMarkers
  constructor: (@map, @mapConfig)->
    #noop

  add: ->
    _.each @mapConfig.layers, (layer)=>
      @addCommunityProgramSource(layer)
      @addCommunutyProgramMarkers(layer)
      @addCommunutyProgramMarkerClustering(layer)
      @addTooltips(layer)
      @addLegend(layer)

  addCommunityProgramSource: (layer)->
    @map.addSource("community-program-markers-#{layer.name}", {
      type: "geojson",
      data: "/api/schools/map_markers/#{layer.name}.json",
      cluster: false,
      clusterMaxZoom: 14,
      clusterRadius: 50
    })

  addCommunutyProgramMarkers: (layer)->
    @map.addLayer({
        "id": "non-cluster-markers-blur-#{layer.name}",
        "type": "circle",
        "source": "community-program-markers-#{layer.name}",
        "paint": {
            "circle-color": layer.border_color,
            "circle-radius": 22
        },
        "layout": {
          "visibility": "visible"
        }
    });

    @map.addLayer({
        "id": "non-cluster-markers-#{layer.name}",
        "type": "circle",
        "source": "community-program-markers-#{layer.name}",
        "paint": {
            "circle-color": layer.fill_color,
            "circle-radius": 18
        },
        "layout": {
          "visibility": "visible"
        }

    });

    @map.addLayer({
        "id": "program-count-label-#{layer.name}",
        "type": "symbol",
        "source": "community-program-markers-#{layer.name}",
        "layout": {
            "text-field": "{programCount}",
            "text-font": [
                    "DIN Offc Pro Medium",
                    "Arial Unicode MS Bold"
                ],
            "text-size": 12,
            "visibility": "visible"
        }
    });


  addCommunutyProgramMarkerClustering: (layer)->
    #Add a layer for the clusters' count labels
    @map.addLayer({
      "id": "cluster-count-#{layer.name}",
      "type": "symbol",
      "source": "community-program-markers-#{layer.name}",
      "layout": {
        "text-field": "{programCount}",
        "text-font": [
          "DIN Offc Pro Medium",
          "Arial Unicode MS Bold"
        ],
        "text-size": 12,
        "visibility": "visible"
      }
    })

  addTooltips: (layer)->
    popup = new (mapboxgl.Popup)(
      closeButton: false
      closeOnClick: false)

    @map.on 'mousemove', (e) =>
      features = @map.queryRenderedFeatures(
        e.point,
        layers: [ "non-cluster-markers-blur-#{layer.name}" ] )

      # Change the cursor style as a UI indicator.
      @map.getCanvas().style.cursor = if features.length then 'pointer' else ''

      if !features.length
        popup.remove()
        return
      feature = features[0]

      # Populate the popup and set its coordinates
      # based on the feature found.
      tooltip = HandlebarsTemplates['community_program_marker_tooltip']({
        "schoolUrl": feature.properties.schoolUrl,
        "schoolName": feature.properties.schoolName,
        "programCount": feature.properties.programCount,
        "schoolProgramsByElement": JSON.parse(
          feature.properties.schoolProgramsByElement
        ),
      })

      popup.setLngLat(feature.geometry.coordinates).setHTML(tooltip).addTo @map
      return

  addLegend: (layer) ->
    legend_item_link = $(
      HandlebarsTemplates['legend_item']({
        "school-type-class": layer.name.toLowerCase(),
        "label": layer.label
      })
    )

    legend_item_link.appendTo('#menu ul')

    map = @map
    legend_item_link.on "click", (e) ->
      e.preventDefault()
      e.stopPropagation()
      _.each [
        "non-cluster-markers-blur-"
        "non-cluster-markers-"
        "program-count-label-"
        "cluster-count-"
      ], (layerType) ->
        layerName = layerType + layer.name
        visibility = map.getLayoutProperty(layerName, 'visibility')
        if visibility == 'visible'
          map.setLayoutProperty layerName, 'visibility', 'none'
          @className = ''
        else
          @className = 'active'
          map.setLayoutProperty layerName, 'visibility', 'visible'
